# ------------------------------
# .github/workflows/deploy.yml
# ------------------------------
name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: 🔍 Validate required secrets are set
        run: |
          echo "🔍 Checking required secrets..."
          REQUIRED=(
            TF_JWT_SECRET
            TF_JWT_REFRESH_SECRET
            TF_DB_PASSWORD
            TF_ADMIN_PASSWORD
          )
          for key in "${REQUIRED[@]}"; do
            if [ -z "${!key}" ]; then
              echo "❌ Missing secret: $key"
              exit 1
            else
              echo "✅ $key is set"
            fi
          done
        env:
          TF_JWT_SECRET:         ${{ secrets.TF_JWT_SECRET }}
          TF_JWT_REFRESH_SECRET: ${{ secrets.TF_JWT_REFRESH_SECRET }}
          TF_DB_PASSWORD:        ${{ secrets.TF_DB_PASSWORD }}
          TF_ADMIN_PASSWORD:     ${{ secrets.TF_ADMIN_PASSWORD }}

      - name: Generate secrets.auto.tfvars.json
        run: |
          cat > secrets.auto.tfvars.json <<EOF
          {
            "secrets_map": {
              "NODE_ENV": "${{ secrets.TF_NODE_ENV }}",
              "HOST": "${{ secrets.TF_HOST }}",
              "PORT": "${{ secrets.TF_PORT }}",
              "JWT_SECRET": "${{ secrets.TF_JWT_SECRET }}",
              "JWT_REFRESH_SECRET": "${{ secrets.TF_JWT_REFRESH_SECRET }}",
              "SALT_ROUNDS": "${{ secrets.TF_SALT_ROUNDS }}",
              "JWT_ACCESS_TOKEN_EXPIRATION": "${{ secrets.TF_JWT_ACCESS_TOKEN_EXPIRATION }}",
              "JWT_REFRESH_TOKEN_EXPIRATION": "${{ secrets.TF_JWT_REFRESH_TOKEN_EXPIRATION }}",
              "RPC_URL": "${{ secrets.TF_RPC_URL }}",
              "WALLET_PRIVATE_KEY": "${{ secrets.TF_WALLET_PRIVATE_KEY }}",
              "NFT_CONTRACT_ADDRESS": "${{ secrets.TF_NFT_CONTRACT_ADDRESS }}",
              "OPENAI_API_ENDPOINT": "${{ secrets.TF_OPENAI_API_ENDPOINT }}",
              "OPENAI_API_KEY": "${{ secrets.TF_OPENAI_API_KEY }}",
              "ADMIN_EMAIL": "${{ secrets.TF_ADMIN_EMAIL }}",
              "ADMIN_PASSWORD": "${{ secrets.TF_ADMIN_PASSWORD }}",
              "ADMIN_USERNAME": "${{ secrets.TF_ADMIN_USERNAME }}"
            }
          }
          EOF

      - name: 🔍 Validate secrets.auto.tfvars.json has no empty values
        run: |
          MISSING=$(jq -r '
            .secrets_map
            | to_entries[]
            | select(.value == "" or .value == null)
            | .key
          ' secrets.auto.tfvars.json)

          if [[ -n "$MISSING" ]]; then
            echo "❌ Found empty secrets: $MISSING"
            exit 1
          else
            echo "✅ All secrets have values"
          fi

      - name: Terraform Plan
        run: |
          terraform plan -input=false -out=tfplan \
            -var-file="secrets.auto.tfvars.json" \
            -var="project_name=${{ secrets.TF_PROJECT_NAME }}" \
            -var="ecr_repo_name=${{ secrets.TF_ECR_REPO_NAME }}" \
            -var="container_image=${{ secrets.TF_CONTAINER_IMAGE }}" \
            -var="db_username=${{ secrets.TF_DB_USERNAME }}" \
            -var="db_password=${{ secrets.TF_DB_PASSWORD }}" \
            -var="db_name=${{ secrets.TF_DB_NAME }}" \
            -var="jwt_secret=${{ secrets.TF_JWT_SECRET }}" \
            -var="jwt_refresh_secret=${{ secrets.TF_JWT_REFRESH_SECRET }}" \
            -var="admin_password=${{ secrets.TF_ADMIN_PASSWORD }}" \
            -var="vpc_cidr=${{ secrets.TF_VPC_CIDR }}" \
            -var='azs=["${{ secrets.TF_AZ1 }}","${{ secrets.TF_AZ2 }}"]'

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
