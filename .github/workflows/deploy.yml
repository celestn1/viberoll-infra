# ------------------------------
# .github/workflows/deploy.yml
# ------------------------------
name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Debug Required Secrets
        run: |
          echo "🔍 Verifying required secrets..."
          REQUIRED_SECRETS=(
            "TF_JWT_SECRET"
            "TF_JWT_REFRESH_SECRET"
            "TF_DB_PASSWORD"
          )
          for key in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!key}" ]; then
              echo "❌ Missing secret: $key"
              exit 1
            else
              echo "✅ $key is set"
            fi
          done
        env:
          TF_JWT_SECRET: ${{ secrets.TF_JWT_SECRET }}
          TF_JWT_REFRESH_SECRET: ${{ secrets.TF_JWT_REFRESH_SECRET }}
          TF_DB_PASSWORD: ${{ secrets.TF_DB_PASSWORD }}

      - name: Write secrets to auto.tfvars.json
        run: |
          cat > secrets.auto.tfvars.json <<EOF
          {
            "project_name": "${{ secrets.TF_PROJECT_NAME }}",
            "vpc_cidr": "${{ secrets.TF_VPC_CIDR }}",
            "azs": ["${{ secrets.TF_AZ1 }}", "${{ secrets.TF_AZ2 }}"],
            "ecr_repo_name": "${{ secrets.TF_ECR_REPO_NAME }}",
            "container_image": "${{ secrets.TF_CONTAINER_IMAGE }}",
            "db_name": "${{ secrets.TF_DB_NAME }}",
            "db_username": "${{ secrets.TF_DB_USERNAME }}",
            "db_password": "${{ secrets.TF_DB_PASSWORD }}",
            "secrets_map": {
              "NODE_ENV": "${{ secrets.TF_NODE_ENV }}",
              "HOST": "${{ secrets.TF_HOST }}",
              "PORT": "${{ secrets.TF_PORT }}",
              "REDIS_URL": "${{ secrets.TF_REDIS_URL }}",
              "DATABASE_URL": "${{ secrets.TF_DATABASE_URL }}",
              "JWT_SECRET": "${{ secrets.TF_JWT_SECRET }}",
              "JWT_REFRESH_SECRET": "${{ secrets.TF_JWT_REFRESH_SECRET }}",
              "SALT_ROUNDS": "${{ secrets.TF_SALT_ROUNDS }}",
              "JWT_ACCESS_TOKEN_EXPIRATION": "${{ secrets.TF_JWT_ACCESS_TOKEN_EXPIRATION }}",
              "JWT_REFRESH_TOKEN_EXPIRATION": "${{ secrets.TF_JWT_REFRESH_TOKEN_EXPIRATION }}",
              "RPC_URL": "${{ secrets.TF_RPC_URL }}",
              "WALLET_PRIVATE_KEY": "${{ secrets.TF_WALLET_PRIVATE_KEY }}",
              "NFT_CONTRACT_ADDRESS": "${{ secrets.TF_NFT_CONTRACT_ADDRESS }}",
              "OPENAI_API_ENDPOINT": "${{ secrets.TF_OPENAI_API_ENDPOINT }}",
              "OPENAI_API_KEY": "${{ secrets.TF_OPENAI_API_KEY }}",
              "ADMIN_EMAIL": "${{ secrets.TF_ADMIN_EMAIL }}",
              "ADMIN_PASSWORD": "${{ secrets.TF_ADMIN_PASSWORD }}",
              "ADMIN_USERNAME": "${{ secrets.TF_ADMIN_USERNAME }}"
            }
          }
          EOF

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
