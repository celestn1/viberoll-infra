# ------------------------------
# .github/workflows/deploy.yml
# ------------------------------
name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-2

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Restore AWS Secrets (if scheduled for deletion)
        run: |
          echo "üîÑ Restoring secrets scheduled for deletion..."
          aws secretsmanager list-secrets \
            --region $AWS_REGION \
            --include-planned-deletion \
            --query 'SecretList[].Name' \
            --output text \
          | tr '\t' '\n' \
          | while read name; do
              echo "üîÅ Restoring $name"
              aws secretsmanager restore-secret --region $AWS_REGION --secret-id "$name" || echo "‚ö†Ô∏è Could not restore $name"
            done

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Import Existing Secrets into Terraform State
        run: |
            set -x  # print all commands
            bash ./import-secrets.sh

      - name: Debug Required Secrets
        run: |
          echo "üîç Verifying required secrets..."
          REQUIRED_SECRETS=(
            "TF_JWT_SECRET"
            "TF_JWT_REFRESH_SECRET"
            "TF_DB_PASSWORD"
          )
          for key in "${REQUIRED_SECRETS[@]}"; do
            if [ -z "${!key}" ]; then
              echo "‚ùå Missing secret: $key"
              exit 1
            else
              echo "‚úÖ $key is set"
            fi
          done
        env:
          TF_JWT_SECRET: ${{ secrets.TF_JWT_SECRET }}
          TF_JWT_REFRESH_SECRET: ${{ secrets.TF_JWT_REFRESH_SECRET }}
          TF_DB_PASSWORD: ${{ secrets.TF_DB_PASSWORD }}

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="project_name=${{ secrets.TF_PROJECT_NAME }}" \
            -var="vpc_cidr=${{ secrets.TF_VPC_CIDR }}" \
            -var='azs=["${{ secrets.TF_AZ1 }}","${{ secrets.TF_AZ2 }}"]' \
            -var="ecr_repo_name=${{ secrets.TF_ECR_REPO_NAME }}" \
            -var="container_image=${{ secrets.TF_CONTAINER_IMAGE }}" \
            -var="db_name=${{ secrets.TF_DB_NAME }}" \
            -var="db_username=${{ secrets.TF_DB_USERNAME }}" \
            -var="db_password=${{ secrets.TF_DB_PASSWORD }}" \
            -var="jwt_secret=${{ secrets.TF_JWT_SECRET }}" \
            -var="jwt_refresh_secret=${{ secrets.TF_JWT_REFRESH_SECRET }}" \
            -var="wallet_private_key=${{ secrets.TF_WALLET_PRIVATE_KEY }}" \
            -var="nft_contract_address=${{ secrets.TF_NFT_CONTRACT_ADDRESS }}" \
            -var="openai_api_key=${{ secrets.TF_OPENAI_API_KEY }}" \
            -var="admin_email=${{ secrets.TF_ADMIN_EMAIL }}" \
            -var="admin_password=${{ secrets.TF_ADMIN_PASSWORD }}" \
            -var="admin_username=${{ secrets.TF_ADMIN_USERNAME }}" \
            -var='secrets_map={
              NODE_ENV="${{ secrets.TF_NODE_ENV }}",
              HOST="${{ secrets.TF_HOST }}",
              PORT="${{ secrets.TF_PORT }}",
              REDIS_URL="${{ secrets.TF_REDIS_URL }}",
              DATABASE_URL="${{ secrets.TF_DATABASE_URL }}",
              JWT_SECRET="${{ secrets.TF_JWT_SECRET }}",
              JWT_REFRESH_SECRET="${{ secrets.TF_JWT_REFRESH_SECRET }}",
              SALT_ROUNDS="${{ secrets.TF_SALT_ROUNDS }}",
              JWT_ACCESS_TOKEN_EXPIRATION="${{ secrets.TF_JWT_ACCESS_TOKEN_EXPIRATION }}",
              JWT_REFRESH_TOKEN_EXPIRATION="${{ secrets.TF_JWT_REFRESH_TOKEN_EXPIRATION }}",
              RPC_URL="${{ secrets.TF_RPC_URL }}",
              WALLET_PRIVATE_KEY="${{ secrets.TF_WALLET_PRIVATE_KEY }}",
              NFT_CONTRACT_ADDRESS="${{ secrets.TF_NFT_CONTRACT_ADDRESS }}",
              OPENAI_API_ENDPOINT="${{ secrets.TF_OPENAI_API_ENDPOINT }}",
              OPENAI_API_KEY="${{ secrets.TF_OPENAI_API_KEY }}",
              ADMIN_EMAIL="${{ secrets.TF_ADMIN_EMAIL }}",
              ADMIN_PASSWORD="${{ secrets.TF_ADMIN_PASSWORD }}",
              ADMIN_USERNAME="${{ secrets.TF_ADMIN_USERNAME }}"
            }' \
            -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
