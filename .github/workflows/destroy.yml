# ------------------------------
# .github/workflows/destroy.yml
# ------------------------------

name: Destroy All Viberoll AWS Resources

on:
  workflow_dispatch:  # Manual trigger only

jobs:
  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest

    env:
      AWS_REGION:                    		eu-west-2
      TF_PROJECT_NAME:               		${{ secrets.TF_PROJECT_NAME }}
      TF_ECR_REPO_NAME:              		${{ secrets.TF_ECR_REPO_NAME }}
      TF_CONTAINER_IMAGE:            		${{ secrets.TF_CONTAINER_IMAGE }}
      TF_DB_USERNAME:                		${{ secrets.TF_DB_USERNAME }}
      TF_DB_NAME:                    		${{ secrets.TF_DB_NAME }}
      TF_DB_PASSWORD:                		${{ secrets.TF_DB_PASSWORD }}
      TF_VPC_CIDR:                   		${{ secrets.TF_VPC_CIDR }}
      TF_AZ1:                        		${{ secrets.TF_AZ1 }}
      TF_AZ2:                        		${{ secrets.TF_AZ2 }}
      TF_HOST:                       		${{ secrets.TF_HOST }}
      TF_PORT:                       		${{ secrets.TF_PORT }}
      TF_NODE_ENV:                   		${{ secrets.TF_NODE_ENV }}
      TF_SALT_ROUNDS:                		${{ secrets.TF_SALT_ROUNDS }}
      TF_RPC_URL:                    		${{ secrets.TF_RPC_URL }}
      TF_WALLET_PRIVATE_KEY:         		${{ secrets.TF_WALLET_PRIVATE_KEY }}
      TF_NFT_CONTRACT_ADDRESS:       		${{ secrets.TF_NFT_CONTRACT_ADDRESS }}
      TF_OPENAI_API_ENDPOINT:        		${{ secrets.TF_OPENAI_API_ENDPOINT }}
      TF_OPENAI_API_KEY:             		${{ secrets.TF_OPENAI_API_KEY }}
      TF_JWT_SECRET:                 		${{ secrets.TF_JWT_SECRET }}
      TF_JWT_REFRESH_SECRET:         		${{ secrets.TF_JWT_REFRESH_SECRET }}
      TF_JWT_ACCESS_TOKEN_EXPIRATION: 		${{ secrets.TF_JWT_ACCESS_TOKEN_EXPIRATION }}
      TF_JWT_REFRESH_TOKEN_EXPIRATION:  	${{ secrets.TF_JWT_REFRESH_TOKEN_EXPIRATION }}
      TF_ADMIN_EMAIL:                		${{ secrets.TF_ADMIN_EMAIL }}
      TF_ADMIN_PASSWORD:             		${{ secrets.TF_ADMIN_PASSWORD }}
      TF_ADMIN_USERNAME:             		${{ secrets.TF_ADMIN_USERNAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Pre-clean ECS (services, tasks & clusters)
        run: |
          echo "Cleaning up ECS services & tasks before Terraform destroyâ€¦"

          # --- 1) Scale down & delete matching services ---
          for cluster in $(aws ecs list-clusters --region $AWS_REGION --query 'clusterArns' --output text); do
            for svc in $(aws ecs list-services \
                          --cluster "$cluster" \
                          --region $AWS_REGION \
                          --query 'serviceArns' --output text); do
              if echo "$svc" | grep -q "${TF_PROJECT_NAME}"; then
                echo "Updating & deleting service $svc in $cluster"
                aws ecs update-service \
                  --cluster "$cluster" \
                  --service "$svc" \
                  --desired-count 0 \
                  --region $AWS_REGION

                # wait for tasks to drain
                aws ecs wait services-inactive \
                  --cluster "$cluster" \
                  --services "$svc" \
                  --region $AWS_REGION

                # now delete the service
                aws ecs delete-service \
                  --cluster "$cluster" \
                  --service "$svc" \
                  --force \
                  --region $AWS_REGION
              fi
            done
          done

          # --- 2) Stop any standalone/running tasks ---
          for cluster in $(aws ecs list-clusters --region $AWS_REGION --query 'clusterArns' --output text); do
            for task in $(aws ecs list-tasks \
                            --cluster "$cluster" \
                            --region $AWS_REGION \
                            --query 'taskArns' --output text); do
              if echo "$task" | grep -q "${TF_PROJECT_NAME}"; then
                echo "Stopping task $task in $cluster"
                aws ecs stop-task \
                  --cluster "$cluster" \
                  --task "$task" \
                  --region $AWS_REGION
              fi
            done
          done

          # --- 3) Wait for all those tasks to reach STOPPED ---
          for cluster in $(aws ecs list-clusters --region $AWS_REGION --query 'clusterArns' --output text); do
            TASKS=$(aws ecs list-tasks \
                      --cluster "$cluster" \
                      --region $AWS_REGION \
                      --desired-status STOPPED \
                      --query 'taskArns' --output text)
            if [ -n "$TASKS" ]; then
              echo "Waiting for tasks to stop in $cluster"
              aws ecs wait tasks-stopped \
                --cluster "$cluster" \
                --tasks $TASKS \
                --region $AWS_REGION
            fi
          done

          # --- 4) Deregister task definitions (optional cleanup) ---
          echo "Deregistering task definitions for ${TF_PROJECT_NAME}-taskâ€¦"
          for td in $(aws ecs list-task-definitions \
                        --family-prefix "${TF_PROJECT_NAME}-task" \
                        --region $AWS_REGION \
                        --query 'taskDefinitionArns' --output text); do
            echo "  deregistering $td"
            aws ecs deregister-task-definition \
              --task-definition "$td" \
              --region $AWS_REGION
          done

          # --- 5) Finally delete the now-empty clusters ---
          echo "Deleting ECS clusters matching ${TF_PROJECT_NAME}â€¦"
          for c in $(aws ecs list-clusters \
                       --region $AWS_REGION \
                       --query 'clusterArns' --output text); do
            if echo "$c" | grep -q "${TF_PROJECT_NAME}"; then
              echo "  deleting cluster $c"
              aws ecs delete-cluster \
                --cluster "$c" \
                --region $AWS_REGION
            fi
          done

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Generate secrets.auto.tfvars.json
        run: |
          cat > secrets.auto.tfvars.json <<EOF
          {
            "secrets_map": {
              "NODE_ENV": "${TF_NODE_ENV}",
              "HOST": "${TF_HOST}",
              "PORT": "${TF_PORT}",
              "JWT_SECRET": "${TF_JWT_SECRET}",
              "JWT_REFRESH_SECRET": "${TF_JWT_REFRESH_SECRET}",
              "SALT_ROUNDS": "${TF_SALT_ROUNDS}",
              "JWT_ACCESS_TOKEN_EXPIRATION": "${TF_JWT_ACCESS_TOKEN_EXPIRATION}",
              "JWT_REFRESH_TOKEN_EXPIRATION": "${TF_JWT_REFRESH_TOKEN_EXPIRATION}",
              "RPC_URL": "${TF_RPC_URL}",
              "WALLET_PRIVATE_KEY": "${TF_WALLET_PRIVATE_KEY}",
              "NFT_CONTRACT_ADDRESS": "${TF_NFT_CONTRACT_ADDRESS}",
              "OPENAI_API_ENDPOINT": "${TF_OPENAI_API_ENDPOINT}",
              "OPENAI_API_KEY": "${TF_OPENAI_API_KEY}",
              "ADMIN_EMAIL": "${TF_ADMIN_EMAIL}",
              "ADMIN_PASSWORD": "${TF_ADMIN_PASSWORD}",
              "ADMIN_USERNAME": "${TF_ADMIN_USERNAME}"
            }
          }
          EOF

      - name: Terraform Plan (Destroy)
        run: |
          terraform plan -destroy -input=false \
            -var-file="secrets.auto.tfvars.json" \
            -var="project_name=${TF_PROJECT_NAME}" \
            -var="ecr_repo_name=${TF_ECR_REPO_NAME}" \
            -var="container_image=${TF_CONTAINER_IMAGE}" \
            -var="db_name=${TF_DB_NAME}" \
            -var="db_username=${TF_DB_USERNAME}" \
            -var="db_password=${TF_DB_PASSWORD}" \
            -var="jwt_secret=${TF_JWT_SECRET}" \
            -var="jwt_refresh_secret=${TF_JWT_REFRESH_SECRET}" \
            -var="admin_password=${TF_ADMIN_PASSWORD}" \
            -var="vpc_cidr=${TF_VPC_CIDR}" \
            -var="environment=${TF_NODE_ENV}" \
            -var="azs=[\"${TF_AZ1}\",\"${TF_AZ2}\"]" \
            -out=tfplan

      - name: Show Destroy Plan (Preview)
        run: terraform show -no-color tfplan

      - name: Terraform Destroy
        run: terraform apply -auto-approve tfplan

      - name: ðŸ’¥ Force Delete AWS Secrets
        run: |
          echo "Cleaning up all secrets related to ${{ env.TF_PROJECT_NAME }} ..."
          aws secretsmanager list-secrets \
            --include-planned-deletion \
            --query 'SecretList[*].Name' --output text | tr '\t' '\n' | \
            grep "${{ env.TF_PROJECT_NAME }}" | \
            xargs -I {} aws secretsmanager delete-secret \
              --secret-id {} --force-delete-without-recovery

      - name: ðŸ’¥ List and Delete All ECR Repos Related to Project
        run: |
          echo "Searching for ECR repos related to: $TF_PROJECT_NAME"
          repos=$(aws ecr describe-repositories --region "$AWS_REGION" \
            --query "repositories[?contains(repositoryName, \`$TF_PROJECT_NAME\`)].repositoryName" \
            --output text)
          if [ -z "$repos" ]; then
            echo "âœ… No matching ECR repositories found"
          else
            echo "$repos" | tr '\t' '\n' | while read repo; do
              echo "Deleting ECR repo: $repo"
              aws ecr delete-repository --repository-name "$repo" --force --region "$AWS_REGION"
            done
          fi

      - name: ðŸ’¥ Clean up ElastiCache Redis Clusters
        run: |
          echo "Deleting ElastiCache clusters matching ${TF_PROJECT_NAME}..."
          for cluster in $(aws elasticache describe-cache-clusters --region $AWS_REGION \
              --query 'CacheClusters[?contains(CacheClusterId, `'"${TF_PROJECT_NAME}"'`)].CacheClusterId' \
              --output text); do
            echo "  deleting $cluster"
            aws elasticache delete-cache-cluster --cache-cluster-id "$cluster" --region $AWS_REGION
          done

      - name: âœ… Confirm Teardown Complete
        run: |
          echo "âœ… Infrastructure teardown complete for project: ${TF_PROJECT_NAME}"
